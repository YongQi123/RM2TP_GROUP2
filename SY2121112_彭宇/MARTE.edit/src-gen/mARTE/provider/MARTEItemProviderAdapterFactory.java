/**
 */
package mARTE.provider;

import java.util.ArrayList;
import java.util.Collection;

import mARTE.util.MARTEAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MARTEItemProviderAdapterFactory extends MARTEAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MARTEItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.Dimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionItemProvider dimensionItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.Dimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionAdapter() {
		if (dimensionItemProvider == null) {
			dimensionItemProvider = new DimensionItemProvider(this);
		}

		return dimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.Unit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitItemProvider unitItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.Unit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnitAdapter() {
		if (unitItemProvider == null) {
			unitItemProvider = new UnitItemProvider(this);
		}

		return unitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.Measure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureItemProvider measureItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.Measure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureAdapter() {
		if (measureItemProvider == null) {
			measureItemProvider = new MeasureItemProvider(this);
		}

		return measureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.SampleRealization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SampleRealizationItemProvider sampleRealizationItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.SampleRealization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSampleRealizationAdapter() {
		if (sampleRealizationItemProvider == null) {
			sampleRealizationItemProvider = new SampleRealizationItemProvider(this);
		}

		return sampleRealizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.QuantitativeNFP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantitativeNFPItemProvider quantitativeNFPItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.QuantitativeNFP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantitativeNFPAdapter() {
		if (quantitativeNFPItemProvider == null) {
			quantitativeNFPItemProvider = new QuantitativeNFPItemProvider(this);
		}

		return quantitativeNFPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.QualitativeNFP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualitativeNFPItemProvider qualitativeNFPItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.QualitativeNFP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualitativeNFPAdapter() {
		if (qualitativeNFPItemProvider == null) {
			qualitativeNFPItemProvider = new QualitativeNFPItemProvider(this);
		}

		return qualitativeNFPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.DerivedQuantity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DerivedQuantityItemProvider derivedQuantityItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.DerivedQuantity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDerivedQuantityAdapter() {
		if (derivedQuantityItemProvider == null) {
			derivedQuantityItemProvider = new DerivedQuantityItemProvider(this);
		}

		return derivedQuantityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.BaseQuantity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BaseQuantityItemProvider baseQuantityItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.BaseQuantity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBaseQuantityAdapter() {
		if (baseQuantityItemProvider == null) {
			baseQuantityItemProvider = new BaseQuantityItemProvider(this);
		}

		return baseQuantityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.NFP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFPItemProvider nfpItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.NFP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFPAdapter() {
		if (nfpItemProvider == null) {
			nfpItemProvider = new NFPItemProvider(this);
		}

		return nfpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.NFP_Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_TypeItemProvider nfP_TypeItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.NFP_Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_TypeAdapter() {
		if (nfP_TypeItemProvider == null) {
			nfP_TypeItemProvider = new NFP_TypeItemProvider(this);
		}

		return nfP_TypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.AnnotatedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotatedElementItemProvider annotatedElementItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.AnnotatedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotatedElementAdapter() {
		if (annotatedElementItemProvider == null) {
			annotatedElementItemProvider = new AnnotatedElementItemProvider(this);
		}

		return annotatedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.AnnotatedModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotatedModelItemProvider annotatedModelItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.AnnotatedModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotatedModelAdapter() {
		if (annotatedModelItemProvider == null) {
			annotatedModelItemProvider = new AnnotatedModelItemProvider(this);
		}

		return annotatedModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.ModelingConcern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelingConcernItemProvider modelingConcernItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.ModelingConcern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelingConcernAdapter() {
		if (modelingConcernItemProvider == null) {
			modelingConcernItemProvider = new ModelingConcernItemProvider(this);
		}

		return modelingConcernItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.NFP_Constrain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_ConstrainItemProvider nfP_ConstrainItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.NFP_Constrain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_ConstrainAdapter() {
		if (nfP_ConstrainItemProvider == null) {
			nfP_ConstrainItemProvider = new NFP_ConstrainItemProvider(this);
		}

		return nfP_ConstrainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.Mode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModeItemProvider modeItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.Mode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModeAdapter() {
		if (modeItemProvider == null) {
			modeItemProvider = new ModeItemProvider(this);
		}

		return modeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.ValueSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueSpecificationItemProvider valueSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.ValueSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueSpecificationAdapter() {
		if (valueSpecificationItemProvider == null) {
			valueSpecificationItemProvider = new ValueSpecificationItemProvider(this);
		}

		return valueSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.Allocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AllocationItemProvider allocationItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.Allocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAllocationAdapter() {
		if (allocationItemProvider == null) {
			allocationItemProvider = new AllocationItemProvider(this);
		}

		return allocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.NFP_Constraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFP_ConstraintItemProvider nfP_ConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.NFP_Constraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFP_ConstraintAdapter() {
		if (nfP_ConstraintItemProvider == null) {
			nfP_ConstraintItemProvider = new NFP_ConstraintItemProvider(this);
		}

		return nfP_ConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.ApplicationAllocationEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationAllocationEndItemProvider applicationAllocationEndItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.ApplicationAllocationEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAllocationEndAdapter() {
		if (applicationAllocationEndItemProvider == null) {
			applicationAllocationEndItemProvider = new ApplicationAllocationEndItemProvider(this);
		}

		return applicationAllocationEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.ExecutionPlatformAllocationEnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecutionPlatformAllocationEndItemProvider executionPlatformAllocationEndItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.ExecutionPlatformAllocationEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecutionPlatformAllocationEndAdapter() {
		if (executionPlatformAllocationEndItemProvider == null) {
			executionPlatformAllocationEndItemProvider = new ExecutionPlatformAllocationEndItemProvider(this);
		}

		return executionPlatformAllocationEndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mARTE.Refinement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefinementItemProvider refinementItemProvider;

	/**
	 * This creates an adapter for a {@link mARTE.Refinement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefinementAdapter() {
		if (refinementItemProvider == null) {
			refinementItemProvider = new RefinementItemProvider(this);
		}

		return refinementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dimensionItemProvider != null)
			dimensionItemProvider.dispose();
		if (unitItemProvider != null)
			unitItemProvider.dispose();
		if (measureItemProvider != null)
			measureItemProvider.dispose();
		if (sampleRealizationItemProvider != null)
			sampleRealizationItemProvider.dispose();
		if (quantitativeNFPItemProvider != null)
			quantitativeNFPItemProvider.dispose();
		if (qualitativeNFPItemProvider != null)
			qualitativeNFPItemProvider.dispose();
		if (derivedQuantityItemProvider != null)
			derivedQuantityItemProvider.dispose();
		if (baseQuantityItemProvider != null)
			baseQuantityItemProvider.dispose();
		if (nfpItemProvider != null)
			nfpItemProvider.dispose();
		if (nfP_TypeItemProvider != null)
			nfP_TypeItemProvider.dispose();
		if (propertyItemProvider != null)
			propertyItemProvider.dispose();
		if (annotatedElementItemProvider != null)
			annotatedElementItemProvider.dispose();
		if (annotatedModelItemProvider != null)
			annotatedModelItemProvider.dispose();
		if (modelingConcernItemProvider != null)
			modelingConcernItemProvider.dispose();
		if (nfP_ConstrainItemProvider != null)
			nfP_ConstrainItemProvider.dispose();
		if (modeItemProvider != null)
			modeItemProvider.dispose();
		if (valueSpecificationItemProvider != null)
			valueSpecificationItemProvider.dispose();
		if (allocationItemProvider != null)
			allocationItemProvider.dispose();
		if (nfP_ConstraintItemProvider != null)
			nfP_ConstraintItemProvider.dispose();
		if (applicationAllocationEndItemProvider != null)
			applicationAllocationEndItemProvider.dispose();
		if (executionPlatformAllocationEndItemProvider != null)
			executionPlatformAllocationEndItemProvider.dispose();
		if (refinementItemProvider != null)
			refinementItemProvider.dispose();
	}

}
